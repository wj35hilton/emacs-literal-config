#+TITLE: Making Emacs Work For Me
#+ORIGINAL AUTHOR: Joost Diepenmaat
#+TWEAKED BY: blaino
#+TWEAKED BY: whilton



* Configuring Emacs: A Yak Shaving Diary

  This is my âˆžth attempt at creating a readable and maintainable Emacs
  configuration. I'm hopeful that using Org-Babel and a literate
  programming style will help tame the bit-rot and spaghettification.

* How to use my configuration

** Obtaining the source

   You can find the latest public version of the configuration in [[https://github.com/joodie/emacs-literal-config/][the
   Github repository]]. The meat of it (and the source of this
   document) is the ~emacs.org~ file.

** Installation

   This configuration is intended to be installable from scratch. It
   uses [[https://github.com/cask/cask][Cask]] to specify the package dependencies. [[https://github.com/rdallasgray/pallet][Pallet]] is installed
   to sync actual installed packages with the dependency spec.

** Installation procedure

  - Install GNU Emacs 24 or higher
  - Install Cask from https://github.com/cask/cask
  - Clone [[https://github.com/joodie/emacs-literal-config][the repository]] as ~$HOME/.emacs.d~ (or symlink it to that
    directory).
  - Run ~cask install~ in ~$HOME/.emacs.d~
  - Start Emacs

** Modifying the emacs.org file

  - run (org-babel-load-file "~/.emacs.d/emacs.org") which can be
    found in init.el

  - If you're trying to install a new package, you've had to run `cask
    install`. See init.el. Doubt that's the way it's supposed to be.

** Issues installing

  - Emacs failing to load pallet can indicate that ~cask~ is
    attempting to install packages using a different Emacs version
    than the one you're starting. Check your ~$PATH~ and/or aliases.

* Graphics and looks
** Color theme
   Leuven theme is awesome!  But zenburn is better.

#+name: look-and-feel
#+BEGIN_SRC emacs-lisp
;(load-theme 'leuven)
(load-theme 'zenburn)

(custom-set-faces
  '(magit-diff-none ((t (:foreground "white"))))
  '(magit-item-highlight ((t (:background "grey44"))))
  '(minibuffer-prompt ((t (:foreground "orange red"))))
  '(cursor ((t (:background "magenta1" :foreground "magenta"))))
  '(aw-leading-char-face ((t (:foreground "red" :height 3.0)))))

;; default window width and height
(defun custom-set-frame-size ()
  (add-to-list 'default-frame-alist '(height . 45))
  (add-to-list 'default-frame-alist '(width . 110)))
(custom-set-frame-size)
(add-hook 'before-make-frame-hook 'custom-set-frame-size)

#+END_SRC

** Font

   I like [[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]], but it doesn't support a wide range of Unicode
   characters, so I fall back on [[http://dejavu-fonts.org/wiki/Main_Page][DejaVu Sans]] for those. Download
   Inconsolata at http://www.fontsquirrel.com/fonts/inconsolata.

   TODO: add code to adjust font size based on monitor ...
         look into (display-monitor-attributes-list)

   results look like: (((geometry 0 0 1440 900) (workarea 0 23 1440 821)
   (mm-size 331 207) (frames) (name . "Color LCD")
   (backing-scale-factor . 2)) ((geometry 1440 -641 1920 1080)
   (workarea 1440 -641 1920 1080) (mm-size 595 335) (frames #<frame
   Emacs@C02SG45FG8WN.local 0x107164438>) (name . "BenQ GL2760")
   (backing-scale-factor . 1)))

   see: http://emacs.stackexchange.com/questions/18188/different-font-heights-for-each-emacs-frame

   maybe something like:

  (defun set-font-for-frame (frame)
  (interactive)
  (if (string-equal "BenQ GL2760" (cdr (assq 'name (frame-monitor-attributes))))
      (set-face-attribute 'default nil
                          :height 120)
    (set-face-attribute 'default nil
                        :height 140)))

  (add-hook 'window-size-change-functions 'set-font-for-frame t)

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil
                         :family "Inconsolata"
                         :height 120
                         :weight 'normal
                         :width 'normal)

     (when (functionp 'set-fontset-font)
       (set-fontset-font "fontset-default"
                         'unicode
                         (font-spec :family "DejaVu Sans Mono"
                                    :width 'normal
                                    :size 12.4
                                    :weight 'normal)))

   #+END_SRC

** Reduce clutter

   Remove the toolbar. It's ugly and I never use it. Also remove the
   scroll bars; below, I set up the fringe to show my position in a
   buffer.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (tool-bar-mode -1)
       (scroll-bar-mode -1))
   #+END_SRC

   When running emacs in a terminal, remove the menu bar.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (not (window-system))
       (menu-bar-mode -1))
   #+END_SRC

** Fringe decorations

   [[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
   buffer. Emacs lets you customize it of course.

   Here I set up git diffs and buffer position in the fringe.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (require 'git-gutter-fringe)
       (global-git-gutter-mode +1))

     (setq-default indicate-buffer-boundaries 'left)
     (setq-default indicate-empty-lines +1)
   #+END_SRC

** Mode line

   I'm using smart mode line to clean up the modeline display a little.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (sml/setup)
     (sml/apply-theme 'dark)
     (setq sml/shorten-directory t)
     (setq sml/shorten-modes t)
   #+END_SRC

   I like to know what time it is
   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (display-time-mode 1)
   #+END_SRC

** Scrolling behavior

   Emacs's default scrolling behavior, like a lot of the default
   Emacs experience, is pretty idiosyncratic. The following snippet
   makes for a smoother scrolling behavior when using keyboard
   navigation.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq redisplay-dont-pause t
           scroll-margin 1
           scroll-step 1
           scroll-conservatively 10000
           scroll-preserve-screen-position 1)
   #+END_SRC

   This snippet makes mouse wheel and trackpad scrolling
   bearable. Scroll in 1-line increments the buffer under the mouse.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-follow-mouse 't)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
   #+END_SRC

** Buffer names
   Setup uniquify so that non-unique buffer names get the parent path
   included to make them unique.
   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
   #+END_SRC

** Window configuration
   Using sticky windows means I can keep a selected window visible
   (using "C-x 9") when deleting windows (with "C-x 0" and "C-x 1").

   Using ace-window for window nav.

   Note ... may remove the sticky windows settings or (better) figure
   it out with ace-window.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (require 'sticky-windows)

     (global-set-key     [(control x) (?0)]        'sticky-window-delete-window)
     (global-set-key     [(control x) (?1)]        'sticky-window-delete-other-windows)
     (global-set-key     [(control x) (?9)]        'sticky-window-keep-window-visible)

     (global-set-key (kbd "C-;") 'ace-window)
     (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

     (ace-window-display-mode)
   #+END_SRC

** Window systems and terminals.
   Emacs runs very fine in a terminal as is, but there are a few
   tweaks that make terminal usage even nicer.

*** Make mouse clicks work in xterm (and iTerm).

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (not (window-system))
       (xterm-mouse-mode +1))
   #+END_SRC

* Start up
** Emacs set up

  Start with the scratch buffer; no start up screen.

  #+NAME: startup
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen +1)
  #+END_SRC

** Shell set up

  A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.

  #+NAME: startup
  #+BEGIN_SRC emacs-lisp
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
  #+END_SRC

* Formatting and white-space

  #+name: formatting
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)

    (defun my/clean-buffer-formatting ()
      "Indent and clean up the buffer"
      (interactive)
      (indent-region (point-min) (point-max))
      (whitespace-cleanup))

    (global-set-key "\C-cn" 'my/clean-buffer-formatting)

    (defun my/general-formatting-hooks ()
      (setq show-trailing-whitespace 't))

    (dolist (mode-hook (my/normal-mode-hooks))
      (add-hook mode-hook 'my/general-formatting-hooks))
  #+END_SRC

** Text (non-code) formatting

   For writing text, I prefer Emacs to do line wrapping for me. Also,
   superfluous white-space should be shown.

   #+name: formatting
   #+BEGIN_SRC emacs-lisp
     (defun my/text-formatting-hooks ()
       (my/turn-on 'auto-fill)) ; turn on automatic hard line wraps

     (add-hook 'text-mode-hook
               'my/text-formatting-hooks)
   #+END_SRC

* Programming
** General programming

   I want to use pretty-symbols mode for all programming.  I want
   flycheck to be on everywhere.  And, I want show-paren-mode on, but
   it seems like something is turning it off.

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (defun my/prog-mode-hooks ()
       (my/turn-on 'pretty-symbols)
       (my/turn-on 'hs-minor-mode))

     (add-hook 'prog-mode-hook
               'my/prog-mode-hooks)

     (add-hook 'after-init-hook #'global-flycheck-mode)

     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;'(show-paren-mode t)
     (add-hook 'after-init-hook #'show-paren-mode)
   #+END_SRC

** Pair programming

   Normally, I think line numbers in code editors just take up space,
   but they can be useful when pair programming; calling out a line
   number is probably more efficient than pointing at the screen.

   I wrapped this in a global minor mode so turning that stuff on and
   off is easy.

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp

     (define-minor-mode my/pair-programming-mode
       "Toggle visualizations for pair programming.

     Interactively with no argument, this command toggles the mode.  A
     positive prefix argument enables the mode, any other prefix
     argument disables it.  From Lisp, argument omitted or nil enables
     the mode, `toggle' toggles the state.

     This turns on hightlighting the current line, line numbers and
     command-log-mode."
       ;; The initial value.
       nil
       ;; The indicator for the mode line.
       " Pairing"
       ;; The minor mode bindings.
       '()
       :group 'my/pairing
       (my/set-modes (if my/pair-programming-mode 1 -1)
                     '(linum hl-line command-log)))

     (define-global-minor-mode my/global-pair-programming-mode
       my/pair-programming-mode
       (lambda () (my/pair-programming-mode 1)))

     (global-set-key "\C-c\M-p" 'my/global-pair-programming-mode)
   #+END_SRC

** Lisps

   For lisp code, I want ParEdit plus general highlighting etc.

   #+NAME: programming-setup
   #+BEGIN_SRC emacs-lisp
     (setq my/lisps
           '(emacs-lisp lisp clojure))

     (defun my/general-lisp-hooks ()
       (my/turn-on 'paredit
                   'rainbow-delimiters
                   'highlight-parentheses))

     (dolist (mode (mapcar 'my/->mode-hook my/lisps))
       (add-hook mode
                 'my/general-lisp-hooks))
   #+END_SRC
** Emacs Lisp
   #+NAME: programming-setup
   #+BEGIN_SRC emacs-lisp
     (defun my/emacs-lisp-hooks ()
       (my/turn-on 'eldoc-mode))

     (add-hook 'emacs-lisp-mode-hook 'my/emacs-lisp-hooks)
   #+END_SRC

** Clojure

   I'm using [[https://github.com/clojure-emacs/cider/commits/master][CIDER]] (formerly ~nrepl.el~) for clojure source/repl
   interaction.

   #+NAME: programming-setup
   #+BEGIN_SRC emacs-lisp
     (defun my/cider-mode-hooks ()
       "Clojure specific setup code that should only be run when we
       have a CIDER REPL connection"
       (cider-turn-on-eldoc-mode))

     (add-hook 'cider-mode-hook
               'my/cider-mode-hooks)
   #+END_SRC

   Clojure-specific enhancements to lisp config.

   #+NAME: programming-setup
   #+BEGIN_SRC emacs-lisp
     (defun my/clojure-mode-hooks ()
       (my/turn-on 'subword))

     (add-hook 'clojure-mode-hook
               'my/clojure-mode-hooks)
   #+END_SRC

   I treat the REPL mode specially, since certain hooks that work in
   ~clojure-mode~ won't make sense or break functionality in
   ~cider-repl-mode~.

   #+NAME: programming-setup
   #+BEGIN_SRC emacs-lisp
          (defun my/cider-repl-mode-hooks ()
            (my/turn-on 'paredit
                        'rainbow-delimiters
                        'highlight-parentheses
                        'subword))

          (add-hook 'cider-repl-mode-hook
                    'my/cider-repl-mode-hooks)
   #+END_SRC

** Ruby
   Tell Emacs rake files are Ruby files.

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (dolist (exp '("Rakefile\\'" "\\.rake\\'"))
       (add-to-list 'auto-mode-alist
                    (cons exp 'ruby-mode)))

   #+END_SRC

   Having some kind of navigation support for rails projects can be
   very handy. I've contributed a few things to [[https://github.com/remvee/emacs-rails][Emacs-Rails mode]] in
   the past, but for the moment, I'm going to try the slightly more
   light-weight Rinari mode.

   #+NAME: programming-setup
   #+BEGIN_SRC emacs-lisp
     (global-rinari-mode +1)
   #+END_SRC
** Perl
   I still occasionally need to work on Perl code, so I have a few
   basic settings to make that reasonably painless.

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (fset 'perl-mode 'cperl-mode) ;; force cperl mode

     (defun my/cperl-mode-hooks ()
       (my/turn-on flymake-mode))

     (add-hook 'cperl-mode-hook 'my/cperl-mode-hooks)
   #+END_SRC
** Javascript

   I use JS2-mode for javascript source.
   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
   #+END_SRC


   Handling jsx:
   https://truongtx.me/2014/03/10/emacs-setup-jsx-mode-and-jsx-syntax-checking/
   Currently only doing the syntax highlighting - no jsxhint

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
   (defadvice web-mode-highlight-part (around tweak-jsx activate)
      (if (equal web-mode-content-type "jsx")
         (let ((web-mode-enable-part-face nil))
           ad-do-it)
        ad-do-it))
   #+END_SRC

   To reduce typing.
   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
   (defun my-console-log ()
      "Insert empty console log statement."
      (interactive)
      (insert "console.log('',);")
      (backward-char 4)
      (js2-indent-line))

   (global-set-key (kbd "C-x C-1") 'my-console-log)

   (defun my-anon-function ()
      "Insert empty anonymous function."
      (interactive)
      (insert "function () {};")
      (backward-char 2)
      (js2-indent-line))

   (global-set-key (kbd "C-x C-2") 'my-anon-function)
   #+END_SRC

** Groovy

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
   #+END_SRC

** JSON

   For JSON-formatted files, I use the default js-mode, which accepts
   top-level bare objects (which is incorrect behaviour for
   javascript, but the default in JSON).

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.json\\'\\|\\.jshintrc\\'" . js-mode))
   #+END_SRC

** Scala

   For scala, I'm using ensime -- doesn't seem to require any
   additional setup beyond specifying it in the Cask file.

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** Compilation mode improvements

*** ANSI Colors

    See http://stackoverflow.com/questions/3072648/cucumbers-ansi-colors-messing-up-emacs-compilation-buffer

    #+name: programming-setup
    #+BEGIN_SRC emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (toggle-read-only)
       (ansi-color-apply-on-region (point-min) (point-max))
       (toggle-read-only))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
    #+END_SRC

    Trying to get the regular emacs shell colorized. Currently not
    working  - it will colorize the history but not current stuff...

    #+name: programming-setup
    #+BEGIN_SRC emacs-lisp
     (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    #+END_SRC


*** Follow output

    #+name: programming-setup
    #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output t)
    #+END_SRC
* SQL
** Postgres

   TODO: Need to add:
     (add-to-list 'sql-postgres-login-params '(port :default 5432))
     (add-to-list 'sql-mysql-login-params '(port :default 3306))

* TODO Auto Complete

  Getting auto completion to work right tends to be a messy process of
  trial and error, though in recent years the situation has improved,
  with =auto-complete= mode being more or less the defacto standard.

  - Fuzzy matching isn't working the way I expected, though. Need to
    work on that.

  #+NAME: auto-complete
  #+BEGIN_SRC emacs-lisp
    ;; (require 'fuzzy)
    ;; (require 'auto-complete)
    ;; (setq ac-auto-show-menu t
    ;;       ac-quick-help-delay 0.5
    ;;       ac-use-fuzzy t)
    ;; (global-auto-complete-mode +1)
  #+END_SRC

  Company mode seems to be better supported by CIDER, so let's try
  that for now.

  #+NAME: auto-complete
  #+BEGIN_SRC emacs-lisp
    (require 'company)
    (add-hook 'after-init-hook 'global-company-mode)
  #+END_SRC

* Global key bindings

  As far as reasonable, I try to keep my custom key bindings within
  the "official" restraints. Specifically, I want my global key
  bindings to start with =C-c [lower case letter]=.

  #+name: global-keys
  #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-cg" 'magit-status)
    (global-set-key (kbd "C-c b") 'magit-blame-mode)
    (global-set-key "\C-cq" 'delete-indentation)
  #+END_SRC

* Global navigation

  I like ~ido~ and ~smex~ for narrowing down files, commands, buffers
  etc.

  #+name: global-navigation
  #+BEGIN_SRC emacs-lisp
    (defun my/edit-emacs-configuration ()
      (interactive)
      (find-file "~/.emacs.d/emacs.org"))

    (global-set-key "\C-ce" 'my/edit-emacs-configuration)

    (setq ido-enable-flex-matching t)
    (ido-mode +1)
    (ido-yes-or-no-mode +1)

    (global-set-key "\M-x" 'smex)
  #+END_SRC

** Projects

   Projectile is useful. Especially, ~projectile-replace~ and
   ~projectile-find-file~.

   Projectile commands are bound with the default ~C-c p~ prefix. So I
   can type ~C-c p C-h~ to list all of them.

  #+name: global-navigation
  #+BEGIN_SRC emacs-lisp
    (projectile-global-mode +1)
  #+END_SRC

* Org Mode
** MobileOrg
   Use Dropbox for syncing my agenda files with my Android
   phone. Worry about the security implications later.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-mobile-directory "~/Dropbox/MobileOrg")
   #+END_SRC
** Global keys

   Short key bindings for capturing notes/links and switching to agenda.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
   #+END_SRC

   Org-Agenda needs to be loaded before calling =org-agenda= works.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
        (require 'org-agenda)
   #+END_SRC

   I prefer a forthnight's overview on the agenda.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
        (setq org-agenda-span 14)
   #+END_SRC

** Notes / Tasks / TODOs

   Make custom markers for todo items:

   - TODO :: something that needs to be done at some point. If it
             has a date, it should be done on that day but it may be
             moved.

   - PENDING :: something that's awaiting feedback from someone
                else. If it has a date, it needs followup if there
                hasn't been any feedback at that time.

   - MEETING :: a scheduled meeting and cannot easily be rescheduled.

   - DONE :: done.

   - CANCELED :: can be ignored. May include a note on why it's been
                 cancelled.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
           '((sequence "TODO(t)" "PENDING(p)" "MEETING(m)" "|" "DONE(d)" "CANCELED(c)")))

   #+END_SRC

   Set up custom org templates

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                    (file+headline "~/gtd/inbox.org" "Tasks")
                                    "* TODO %i%?")
                                   ("T" "Tickler" entry
                                    (file+headline "~/gtd/tickler.org" "Tickler")
                                    "* %i%? \n %U")))
   #+END_SRC

   Automatically mark todo items with todo subitems as DONE when all
   subitems are done.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp

     (defun my-org-autodone (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

     (add-hook 'org-after-todo-statistics-hook 'my-org-autodone)

   #+END_SRC

   List of GTD agenda files.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-files '("~/gtd/inbox.org"
                            "~/gtd/gtd.org"
                            "~/gtd/tickler.org"))

   #+END_SRC

   I want to file and refile notes to any main header in any file in
   my =org-agenda-files= list.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '((nil :level . 1)
                                (org-agenda-files :level . 1)))

   #+END_SRC

** Org-Babel

*** Fontifying source blocks

    Enable yntax highlighting in src blocks.
    #+name: org-config
    #+BEGIN_SRC emacs-lisp
      (setq-default org-src-fontify-natively t)
    #+END_SRC

    Use the =minted= package for syntax highlighting source blocks in
    LaTeX / PDF exports. [[http://joat-programmer.blogspot.nl/2013/07/org-mode-version-8-and-pdf-export-with.html][Configuration copied from a blog post
    by Florian Bergmann.]]

    #+name: org-config
    #+BEGIN_SRC emacs-lisp
     ;; Include the latex-exporter
     (require 'ox-latex)
     ;; Add minted to the defaults packages to include when exporting.
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     ;; Tell the latex export to use the minted package for source
     ;; code coloration.
     (setq org-latex-listings 'minted)
     ;; Let the exporter use the -shell-escape option to let latex
     ;; execute external programs.
     ;; This obviously and can be dangerous to activate!

     ;; I use pdflatex instead of xelatex because that seems to work
     ;; much better with utf-8 files
     (setq org-latex-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    #+END_SRC

    Untangle files.

    #+name: org-config
    #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cu" 'my/org-babel-untangle)

     (defun my/org-babel-untangle (path)
       (interactive "fFile to include: ")
       (message "Untangling '%s'..." path)
       (save-current-buffer
         (let ((lang (save-current-buffer
                       (set-buffer (find-file-noselect path))
                       (my/mode->language major-mode))))
           (insert (format "\n** %s\n\n#+BEGIN_SRC %s :tangle %s\n"
                           (capitalize (replace-regexp-in-string "\\[_-\\]" " " (file-name-base path)))
                           lang
                           (file-relative-name path)))
           (forward-char (cadr (insert-file-contents path)))
           (insert "\n#+" "END_SRC\n"))))

     (defun my/mode->language (mode)
       "Return the language for the given mode"
       (intern (replace-regexp-in-string "\\-mode$" "" (my/->string mode))))

     (defun my/org-babel-untangle-tree (path)
       (interactive "Droot directory to untangle: ")
       (mapc 'my/org-babel-untangle
             (cl-remove-if 'file-directory-p
                           (f-files path (lambda (p) t) t))))

    #+END_SRC

** Language evaluation support

   Org-Babel needs to be told that evaluation of certain languages is
   allowed. I collect all languages here, then enable all of them at
   the end of the section.

   #+name: org-config :noweb no-export
   #+BEGIN_SRC emacs-lisp
     (defvar my/org-babel-evaluated-languages
       '(emacs-lisp)
       "List of languages that may be evaluated in Org documents")

     <<org-config-languages>>

     (org-babel-do-load-languages
      'org-babel-load-languages
      (mapcar (lambda (lang)
                (cons lang t))
              my/org-babel-evaluated-languages))
   #+END_SRC

** Diagramming

   I like [[http://www.graphviz.org/][Graphviz]] for generating graphs. It takes a few lines of code
   to link graphviz's =dot= mode to =org-babel= so I can include dot
   source in org mode and export with nice looking diagrams.

   #+name: org-config-languages
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))

     (add-to-list 'my/org-babel-evaluated-languages 'dot)
   #+END_SRC

   [[http://ditaa.sourceforge.net/][Ditaa]] is another nice package for turning ASCII art into PNG/EPS
   diagrams. Turn that on, too.

   #+name: org-config-languages
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'my/org-babel-evaluated-languages 'ditaa)
   #+END_SRC

   PlantUml is built on top of Graphviz.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'my/org-babel-evaluated-languages 'plantuml)
   #+END_SRC

* Other libraries
  Loading ~dired+~ improves ~dired~, but it defaults to showing too
  little, so commenting it out.
  #+name: libraries
  #+BEGIN_SRC emacs-lisp
    ; (require 'dired+)
  #+END_SRC
* Configuration file layout

  Here I define the emacs.el file that gets generated by the code in
  this org file.

  #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
    ;;;; Do not modify this file by hand.  It was automatically generated
    ;;;; from `emacs.org` in the same directory. See that file for more
    ;;;; information.
    ;;;;
    ;;;; If you cannot find the `emacs.org` file, see the source
    ;;;; repository at https://github.com/joodie/emacs-literal-config

    <<environment>>
    <<tools>>
    <<customize-config>>
    <<look-and-feel>>
    <<formatting>>
    <<programming-setup>>
    <<auto-complete>>
    <<global-keys>>
    <<global-navigation>>
    <<org-config>>
    <<libraries>>
    <<startup>>
  #+END_SRC

* Tools

  This section defines some functionality used elsewhere in this
  configuration.

** Hooks and modes

   #+name: tools
   #+BEGIN_SRC emacs-lisp
     (defun my/->string (str)
       (cond
        ((stringp str) str)
        ((symbolp str) (symbol-name str))))

     (defun my/->mode-hook (name)
       "Turn mode name into hook symbol"
       (intern (replace-regexp-in-string "\\(-mode\\)?\\(-hook\\)?$"
                                         "-mode-hook"
                                         (my/->string name))))

     (defun my/->mode (name)
       "Turn mode name into mode symbol"
       (intern (replace-regexp-in-string "\\(-mode\\)?$"
                                         "-mode"
                                         (my/->string name))))

     (defun my/set-modes (arg mode-list)
       (dolist (m mode-list)
         (funcall (my/->mode m) arg)))

     (defun my/turn-on (&rest mode-list)
       "Turn on the given (minor) modes."
       (my/set-modes +1 mode-list))

     (defvar my/normal-base-modes
       (mapcar 'my/->mode '(text prog))
       "The list of modes that are considered base modes for
       programming and text editing. In an ideal world, this should
       just be text-mode and prog-mode, however, some modes that
       should derive from prog-mode derive from fundamental-mode
       instead. They are added here.")

     (defun my/normal-mode-hooks ()
       "Returns the mode-hooks for `my/normal-base-modes`"
       (mapcar 'my/->mode-hook my/normal-base-modes))

   #+END_SRC

** Backup

  Not sure if this stuff right.

   #+name: tools
   #+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)
(setq make-backup-files nil)

   #+END_SRC

* Environment

  OSX doesn't set the environment from the shell init files for
  graphical applications, but I set PATH and a bunch of other stuff
  there. The =exec-path-from-shell= package will take care of
  that. Thanks to Ting-Yu Lin for pointing it out.

  #+NAME: environment
  #+BEGIN_SRC emacs-lisp
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
  #+END_SRC

  External packages may be dropped in the .emacs.d/ext directory.

  #+NAME: environment
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/ext")
  #+END_SRC
* Options set using the customize interface

  By default, Emacs saves the options you set via the `customize-*`
  functions in the user init file, which is "~/.emacs.d/init.el" in
  this setup. I prefer to have it put that data in a seperate file.

  #+name: customize-config
  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
  #+END_SRC
